Hivemap (
  hives = HiveNodeArray (
    HiveNode (
      identifier = 'int_step',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 231.0,
        y = 14.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('int',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'int',
          value = '10',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'for_each',
      import_path = 'dragonfly.gen.ForEach',
      position = Coordinate2D (
        x = -59.0,
        y = -182.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('float',)",
        ),
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
        'iterable',
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'entity_class',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 21.0,
        y = -13.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('str', 'id')",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'str',
          value = 'cube',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'compose_0_0',
      import_path = 'dragonfly.transform.euler.Compose',
      position = Coordinate2D (
        x = 285.0,
        y = -90.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
        'x',
        'y',
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'compose',
      import_path = 'dragonfly.transform.vector.Compose',
      position = Coordinate2D (
        x = 260.0,
        y = -408.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
        'y',
        'z',
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'spawn',
      import_path = 'dragonfly.entity.Spawn',
      position = Coordinate2D (
        x = 123.0,
        y = -299.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'spawn_hive',
          data_type = 'bool',
          value = 'True',
        ),
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
        'entity_class',
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'module_name',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 147.0,
        y = -173.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('str',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'str',
          value = 'test.panda_project.some_spawn_hive',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'z',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 189.0,
        y = -284.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('float',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'float',
          value = '0.0',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'x_coord',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 139.0,
        y = -408.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('float',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'float',
          value = '0.0',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'set_position',
      import_path = 'dragonfly.entity.Position',
      position = Coordinate2D (
        x = 411.0,
        y = -279.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'bound',
          data_type = 'bool',
          value = 'False',
        ),
        InstanceParameter (
          identifier = 'mode',
          data_type = 'str',
          value = 'set',
        ),
        InstanceParameter (
          identifier = 'coordinate_system',
          data_type = 'str',
          value = 'absolute',
        ),
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'random',
      import_path = 'dragonfly.random.Random',
      position = Coordinate2D (
        x = 173.0,
        y = -53.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
        'int_min',
        'int_max',
        'int_step',
      ),
      cls_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'seed',
          data_type = 'NoneType',
          value = 'None',
        ),
      ),
    ),
    HiveNode (
      identifier = 'int_min',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 231.0,
        y = 14.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('int',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'int',
          value = '0',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'on_start_0',
      import_path = 'dragonfly.event.OnStart',
      position = Coordinate2D (
        x = -190.0,
        y = -165.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'x',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 4.0,
        y = -46.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('float',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'float',
          value = '0.0',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'y_0',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 4.0,
        y = -46.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('float',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'float',
          value = '0.0',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'int_max',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 231.0,
        y = 14.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('int',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'int',
          value = '50',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'get_spawn_hive_cls',
      import_path = 'get_from_path.GetFromPath',
      position = Coordinate2D (
        x = 5.0,
        y = -307.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
        'module_name',
        'attr_name_',
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'set_orientation',
      import_path = 'dragonfly.entity.Orientation',
      position = Coordinate2D (
        x = 388.0,
        y = -161.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'bound',
          data_type = 'bool',
          value = 'False',
        ),
        InstanceParameter (
          identifier = 'mode',
          data_type = 'str',
          value = 'set',
        ),
        InstanceParameter (
          identifier = 'coordinate_system',
          data_type = 'str',
          value = 'absolute',
        ),
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'y',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 189.0,
        y = -284.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('float',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'float',
          value = '10.0',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'attr_name_',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 147.0,
        y = -173.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('str',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'str',
          value = 'SomeSpawnHive',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'iterable',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 42.0,
        y = 109.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = '()',
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'tuple',
          value = '(0.0,)',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
  ),
  bees = BeeNodeArray (
  ),
  helpers = HelperNodeArray (
  ),
  connections = ConnectionArray (
    Connection (
      from_node = 'int_step',
      output_name = 'value_out',
      to_node = 'random',
      input_name = 'int_step',
      is_trigger = False,
    ),
    Connection (
      from_node = 'for_each',
      output_name = 'value_out',
      to_node = 'x_coord',
      input_name = 'value_in',
      is_trigger = False,
    ),
    Connection (
      from_node = 'for_each',
      output_name = 'value_out',
      to_node = 'spawn',
      input_name = 'spawn',
      is_trigger = True,
    ),
    Connection (
      from_node = 'for_each',
      output_name = 'value_out',
      to_node = 'set_position',
      input_name = 'trig',
      is_trigger = True,
    ),
    Connection (
      from_node = 'for_each',
      output_name = 'value_out',
      to_node = 'set_orientation',
      input_name = 'trig',
      is_trigger = True,
    ),
    Connection (
      from_node = 'entity_class',
      output_name = 'value_out',
      to_node = 'spawn',
      input_name = 'entity_class',
      is_trigger = False,
    ),
    Connection (
      from_node = 'compose_0_0',
      output_name = 'result',
      to_node = 'set_orientation',
      input_name = 'orientation',
      is_trigger = False,
    ),
    Connection (
      from_node = 'compose',
      output_name = 'result',
      to_node = 'set_position',
      input_name = 'position',
      is_trigger = False,
    ),
    Connection (
      from_node = 'spawn',
      output_name = 'entity_last_created',
      to_node = 'set_position',
      input_name = 'entity',
      is_trigger = False,
    ),
    Connection (
      from_node = 'spawn',
      output_name = 'entity_last_created',
      to_node = 'set_orientation',
      input_name = 'entity',
      is_trigger = False,
    ),
    Connection (
      from_node = 'module_name',
      output_name = 'value_out',
      to_node = 'get_spawn_hive_cls',
      input_name = 'module_name',
      is_trigger = False,
    ),
    Connection (
      from_node = 'z',
      output_name = 'value_out',
      to_node = 'compose',
      input_name = 'z',
      is_trigger = False,
    ),
    Connection (
      from_node = 'x_coord',
      output_name = 'value_out',
      to_node = 'compose',
      input_name = 'x',
      is_trigger = False,
    ),
    Connection (
      from_node = 'random',
      output_name = 'int',
      to_node = 'compose_0_0',
      input_name = 'z',
      is_trigger = False,
    ),
    Connection (
      from_node = 'int_min',
      output_name = 'value_out',
      to_node = 'random',
      input_name = 'int_min',
      is_trigger = False,
    ),
    Connection (
      from_node = 'on_start_0',
      output_name = 'on_started',
      to_node = 'for_each',
      input_name = 'trig_in',
      is_trigger = True,
    ),
    Connection (
      from_node = 'x',
      output_name = 'value_out',
      to_node = 'compose_0_0',
      input_name = 'x',
      is_trigger = False,
    ),
    Connection (
      from_node = 'y_0',
      output_name = 'value_out',
      to_node = 'compose_0_0',
      input_name = 'y',
      is_trigger = False,
    ),
    Connection (
      from_node = 'int_max',
      output_name = 'value_out',
      to_node = 'random',
      input_name = 'int_max',
      is_trigger = False,
    ),
    Connection (
      from_node = 'get_spawn_hive_cls',
      output_name = 'result_',
      to_node = 'spawn',
      input_name = 'hive_class',
      is_trigger = False,
    ),
    Connection (
      from_node = 'y',
      output_name = 'value_out',
      to_node = 'compose',
      input_name = 'y',
      is_trigger = False,
    ),
    Connection (
      from_node = 'attr_name_',
      output_name = 'value_out',
      to_node = 'get_spawn_hive_cls',
      input_name = 'attr_name_',
      is_trigger = False,
    ),
    Connection (
      from_node = 'iterable',
      output_name = 'value_out',
      to_node = 'for_each',
      input_name = 'iterable',
      is_trigger = False,
    ),
  ),
  docstring = '',
)
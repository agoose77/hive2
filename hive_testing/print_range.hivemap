Hivemap (
  hives = HiveNodeArray (
    HiveNode (
      identifier = 'print',
      import_path = 'dragonfly.io.Print',
      position = Coordinate2D (
        x = 115.0,
        y = -221.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'for_each',
      import_path = 'dragonfly.gen.ForEach',
      position = Coordinate2D (
        x = -45.0,
        y = -227.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'str',
          value = 'int',
        ),
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'max_value',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 16.0,
        y = -84.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'str',
          value = 'int',
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'int',
          value = '11',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'on_start',
      import_path = 'dragonfly.event.OnStart',
      position = Coordinate2D (
        x = -228.0,
        y = -172.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'min_value',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 16.0,
        y = -84.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'str',
          value = 'int',
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'int',
          value = '0',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'step',
      import_path = 'dragonfly.std.Variable',
      position = Coordinate2D (
        x = 16.0,
        y = -84.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'str',
          value = 'int',
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'int',
          value = '1',
        ),
      ),
      folded_pins = StringArray (
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
    HiveNode (
      identifier = 'range',
      import_path = 'dragonfly.gen.Range',
      position = Coordinate2D (
        x = -247.0,
        y = -262.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
        'min_value',
        'max_value',
        'step',
      ),
      cls_args = InstanceParameterArray (
      ),
    ),
  ),
  bees = BeeNodeArray (
  ),
  helpers = HelperNodeArray (
  ),
  connections = ConnectionArray (
    Connection (
      from_node = 'for_each',
      output_name = 'value_out',
      to_node = 'print',
      input_name = 'value_in',
      is_trigger = False,
    ),
    Connection (
      from_node = 'max_value',
      output_name = 'value_out',
      to_node = 'range',
      input_name = 'max_value',
      is_trigger = False,
    ),
    Connection (
      from_node = 'on_start',
      output_name = 'on_started',
      to_node = 'for_each',
      input_name = 'trig_in',
      is_trigger = True,
    ),
    Connection (
      from_node = 'min_value',
      output_name = 'value_out',
      to_node = 'range',
      input_name = 'min_value',
      is_trigger = False,
    ),
    Connection (
      from_node = 'step',
      output_name = 'value_out',
      to_node = 'range',
      input_name = 'step',
      is_trigger = False,
    ),
    Connection (
      from_node = 'range',
      output_name = 'iterator',
      to_node = 'for_each',
      input_name = 'iterable',
      is_trigger = False,
    ),
  ),
  docstring = '',
)